#!/usr/bin/env bats

# -----------------------------------------------------------------------------
# Plugin‑management command tests.  These rely on the on‑disk plugin registry
# generated by packages/cli/src/utils/parse-registry.ts.  Each test runs in its
# own temp workspace.
# -----------------------------------------------------------------------------


setup() {
  set -euo pipefail
  export TEST_TMP_DIR="$(mktemp -d /var/tmp/eliza-test-plugins-XXXXXX)"
  cd "$TEST_TMP_DIR"

  # Source common utilities
source "$BATS_TEST_DIRNAME/common.sh"
setup_elizaos_cmd
}

teardown() {
  [[ -n "${TEST_TMP_DIR:-}" && "$TEST_TMP_DIR" == /var/tmp/eliza-test-* ]] && rm -rf "$TEST_TMP_DIR"
}

# -----------------------------------------------------------------------------
# Helper
# -----------------------------------------------------------------------------
create_test_project() {
  local name="$1"
  run $ELIZAOS_CMD create "$name" --yes
  [ "$status" -eq 0 ]
  cd "$name"
}

# -----------------------------------------------------------------------------
# Core help / list
# -----------------------------------------------------------------------------
@test "plugins command shows help with no subcommand" {
  run $ELIZAOS_CMD plugins
  [ "$status" -eq 0 ]
  [[ "$output" == *"Manage ElizaOS plugins"* ]]
  for kw in Commands: list add installed-plugins remove; do
    [[ "$output" == *"$kw"* ]]
  done
}

@test "plugins --help shows usage information" {
  run $ELIZAOS_CMD plugins --help
  [ "$status" -eq 0 ]
  [[ "$output" == *"Manage ElizaOS plugins"* ]]
}

@test "plugins list shows available plugins" {
  run $ELIZAOS_CMD plugins list
  [ "$status" -eq 0 ]
  [[ "$output" == *"Available v1.x plugins"* ]]
  [[ "$output" =~ plugin-openai ]] && [[ "$output" =~ plugin-ollama ]]
}

@test "plugins list aliases (l, ls) work correctly" {
  for alias in l ls; do
    run $ELIZAOS_CMD plugins "$alias"
    [ "$status" -eq 0 ]
    [[ "$output" == *"Available v1.x plugins"* && "$output" == *"plugins"* ]]
  done
}

# -----------------------------------------------------------------------------
# add / install
# -----------------------------------------------------------------------------
@test "plugins add installs a plugin" {
  create_test_project test-add-project
  run $ELIZAOS_CMD plugins add @elizaos/plugin-sql --no-env-prompt
  [ "$status" -eq 0 ]
  grep -q '@elizaos/plugin-sql' package.json
}

@test "plugins install alias works" {
  create_test_project test-install-alias
  run $ELIZAOS_CMD plugins install @elizaos/plugin-openai --no-env-prompt
  [ "$status" -eq 0 ]
  grep -q '@elizaos/plugin-openai' package.json
}

@test "plugins add supports third-party plugins" {
  create_test_project test-third-party
  run $ELIZAOS_CMD plugins add @fleek-platform/eliza-plugin-mcp --no-env-prompt
  [ "$status" -eq 0 ]
  grep -q '@fleek-platform/eliza-plugin-mcp' package.json
}

@test "plugins add supports GitHub URL installation" {
  create_test_project test-github-url
  run $ELIZAOS_CMD plugins add https://github.com/fleek-platform/eliza-plugin-mcp --no-env-prompt
  [ "$status" -eq 0 ]

  create_test_project test-github-shorthand
  run $ELIZAOS_CMD plugins add github:elizaos-plugins/plugin-openrouter#1.x --no-env-prompt
  [ "$status" -eq 0 ]
  grep -q 'github:elizaos-plugins/plugin-openrouter#1.x' package.json
}

# -----------------------------------------------------------------------------
# installed-plugins list
# -----------------------------------------------------------------------------
@test "plugins installed-plugins shows installed plugins" {
  create_test_project test-installed-project
  run $ELIZAOS_CMD plugins add @elizaos/plugin-openai --no-env-prompt
  [ "$status" -eq 0 ]
  run $ELIZAOS_CMD plugins installed-plugins
  [ "$status" -eq 0 ]
  [[ "$output" == *"@elizaos/plugin-openai"* ]]
}

# -----------------------------------------------------------------------------
# remove / aliases
# -----------------------------------------------------------------------------
@test "plugins remove uninstalls a plugin" {
  create_test_project test-remove-project
  run $ELIZAOS_CMD plugins add @elizaos/plugin-sql --no-env-prompt
  [ "$status" -eq 0 ]
  grep -q '@elizaos/plugin-sql' package.json
  run $ELIZAOS_CMD plugins remove @elizaos/plugin-sql
  [ "$status" -eq 0 ]
  ! grep -q '@elizaos/plugin-sql' package.json
}

@test "plugins remove aliases (delete, del, rm) work" {
  create_test_project test-remove-aliases

  for p in @elizaos/plugin-sql @elizaos/plugin-openai @elizaos/plugin-anthropic; do
    run $ELIZAOS_CMD plugins add "$p" --no-env-prompt
    [ "$status" -eq 0 ]
  done

  for pair in "delete @elizaos/plugin-sql" "del @elizaos/plugin-openai" "rm @elizaos/plugin-anthropic"; do
    set -- $pair
    run $ELIZAOS_CMD plugins "$1" "$2"
    [ "$status" -eq 0 ]
  done
}

# -----------------------------------------------------------------------------
# Negative case – unknown plugin
# -----------------------------------------------------------------------------
@test "plugins add fails for missing plugin" {
  create_test_project proj-missing-plugin
  run $ELIZAOS_CMD plugins add missing --no-env-prompt
  [ "$status" -ne 0 ]
  [[ "$output" =~ "not found in registry" ]] || [[ "${error:-}" =~ "not found in registry" ]]
}

# -----------------------------------------------------------------------------
# Direct GitHub URL installs (success path checks node_modules if online)
# -----------------------------------------------------------------------------
@test "plugins add via direct GitHub URL" {
  create_test_project proj-direct-github-url
  run $ELIZAOS_CMD plugins add https://github.com/fleek-platform/eliza-plugin-mcp --no-env-prompt
  [ "$status" -eq 0 ]
  grep -q '@fleek-platform/eliza-plugin-mcp' package.json
}

@test "plugins add via GitHub shorthand URL" {
  create_test_project proj-shorthand-github-url
  run $ELIZAOS_CMD plugins add github:elizaos-plugins/plugin-openrouter#1.x --no-env-prompt
  [ "$status" -eq 0 ]
  grep -q 'github:elizaos-plugins/plugin-openrouter#1.x' package.json
}
